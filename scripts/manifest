#!/usr/bin/python3

from tempfile import mkdtemp
from git import Git, Repo, cmd
from xml.etree import ElementTree
from xml.etree.ElementTree import Element
from xml.dom import minidom
from sys import argv, exit
from os import environ, getcwd, getenv, makedirs
from os.path import isfile, isdir
import re
import yaml

class AndroidManifest:

    def __init__(
        self,
        ref,
        repo='platform/manifest',
        extra_remotes=[],
        extra_projects=[],
        remove_paths=[],
        remove_groups=[]
    ):
        self.default_fetch="https://android.googlesource.com"
        self.ref = ref
        self.repo = repo
        self.extra_remotes = extra_remotes
        self.extra_projects = extra_projects
        self.remove_paths = remove_paths
        self.remove_groups = remove_groups
        for project in self.extra_projects:
            self.remove_paths.append(project['path'])
        self._fetch()
        self._remove()
        self._extend()
        self._set_default_revision()
        self._set_remotes()
        self._set_default_remote()
        self._lock()

    def _fetch(self):
        manifest_url = "%s/%s" % (self.default_fetch, self.repo)
        print("Checking out: \"%s\" at \"%s\"" % (manifest_url, self.ref))
        manifest_repo = Repo.clone_from(manifest_url, mkdtemp())
        manifest_repo.head.reference = manifest_repo.commit(self.ref)
        string = manifest_repo.git.show('HEAD:default.xml')
        self.manifest = ElementTree.fromstring(string)

    def _extend(self):
        for remote in self.extra_remotes:
            element = Element("remote")
            element.attrib = remote
            element.tail = "\n"
            self.manifest.insert(1,element)
            print("Adding Remote: \"%s\"" % (element.attrib['name']))
        for project in self.extra_projects:
            element = Element("project")
            element.text = "\n"
            if 'children' in project:
                children = project.pop('children', None)
                for child in children:
                    if 'tag' in child:
                        tag = child.pop('tag', None)
                    subelement = Element(tag)
                    subelement.attrib = child
                    subelement.tail = "\n"
                    element.append(subelement)
            element.attrib = project
            element.tail = "\n"
            self.manifest.insert(4,element)
            print("Adding Project: \"%s\"" % (element.attrib['name']))

    def _remove(self):
        projects=self.manifest.findall(".//project")
        for project in projects:
            path=project.attrib['path']
            if 'groups' in project.attrib:
                groups = project.attrib['groups'].split(',')
                if any(i in groups for i in self.remove_groups):
                    self.manifest.remove(project)
                    print("Removing Project: \"%s\"" % (path))
            if 'path' in project.attrib:
                if project.attrib['path'] in self.remove_paths:
                    self.manifest.remove(project)
                    print("Removing Project: \"%s\"" % (path))

    def _set_remotes(self):
        self.remotes={}
        remote_nodes = self.manifest.findall(".//remote")
        for remote_node in remote_nodes:
            self.remotes[remote_node.attrib["name"]] = {}
            if 'fetch' in remote_node.attrib:
                if remote_node.attrib['fetch'] == '..':
                    remote_node.attrib['fetch'] = self.default_fetch
            else:
                remote_node.attrib['fetch'] = self.default_fetch
            self.remotes[remote_node.attrib["name"]]['fetch'] = \
                remote_node.attrib['fetch']
            if 'review' in remote_node.attrib:
                self.remotes[remote_node.attrib["name"]]['review'] = \
                    remote_node.attrib["review"]
            if 'revision' in remote_node.attrib:
                self.remotes[remote_node.attrib["name"]]["revision"] = \
                    remote_node.attrib["revision"]
            else:
                self.remotes[remote_node.attrib["name"]]["revision"] = \
                    self.default_revision
            print("Adding Remote: \"%s\"" % (remote_node.attrib['name']))

    def _set_default_revision(self):
        self.default_revision = \
            revision=self.manifest.findall(".//default")[0].attrib['revision']
        print("Setting Revision: \"%s\"" % (revision))

    def _set_default_remote(self):
        default_remote_name = \
            self.manifest.findall(".//default")[0].attrib['remote']
        self.default_remote = default_remote_name
        print("Setting Default Remote: \"%s\"" % default_remote_name)

    def _lock(self):
        projects=self.manifest.findall(".//project")
        for project in projects:
            print("Locking Project: \"%s\"" % (project.attrib['name']))
            if 'remote' in project.attrib:
                remote = self.remotes[project.attrib['remote']]
            else:
                remote = self.remotes[self.default_remote]
            if 'revision' in project.attrib:
                revision = project.attrib['revision']
            elif 'revision' in remote:
                revision = remote['revision']
            if 'refs' not in revision:
                revision = "refs/heads/%s" % revision
            project_repo_url="%s/%s.git" % (
                remote.get('fetch',self.remotes[self.default_remote]['fetch']),
                project.attrib['name']
            )
            remote_refs = self._lsremote(project_repo_url)
            project.attrib['upstream'] = revision
            project.attrib['revision'] = remote_refs[revision]

    def _lsremote(self, url):
        remote_refs = {}
        g = cmd.Git()
        for ref in g.ls_remote(url).split('\n'):
            hash_ref_list = ref.split('\t')
            remote_refs[hash_ref_list[1]] = hash_ref_list[0]
        return remote_refs

    def pretty_print(self):
        rough_string = ElementTree.tostring(self.manifest, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="  ", newl="")

if __name__ == "__main__":

    config_file='%s/config.yml' % getcwd()
    with open(config_file, encoding='utf-8') as data_file:
        config = yaml.load(data_file.read())

    path="%s/manifests" % getcwd()
    makedirs(path, exist_ok=True)

    if config['build_kernel'] == "true":
        kernel_names=[]
        manifest_kernels=[]
        for device in config['devices'].keys():
            kernel_name = config['devices'][device]['kernel_name']
            repo = "kernel/manifest"
            ref = config['devices'][device]['kernel_ref']
            filename = '{}/kernel-{}.xml'.format(path, kernel_name)
            if kernel_name not in kernel_names:
                kernel_manifest = AndroidManifest(ref, repo).pretty_print()
                open(filename,'w').write(kernel_manifest)
            kernel_names.append(kernel_name)

    manifest = AndroidManifest(
        ref=config['platform']['ref'],
        extra_remotes = config.get('platform',{}).get('extra_remotes',[]),
        extra_projects = config.get('platform',{}).get('extra_projects',[]),
        remove_paths = config.get('platform',{}).get('remove_paths',[]),
        remove_groups = config.get('platform',{}).get('remove_groups',[]),
    ).pretty_print()
    open('%s/base.xml' % (path),'w').write(manifest)

    repo = Repo.init(path)
    repo.index.add(['*'])
    repo.index.commit("manifest commit")
